html
	head
		meta(charset="utf-8")

		title Nodejs presentation</title>

		meta(name="description", content="A framework for easily creating beautiful presentations using HTML")
		meta(name="author",content="Hakim El Hattab")

		meta(name="apple-mobile-web-app-capable", content="yes")
		meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")

		meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")

		link(rel="stylesheet", href="revealjs/css/reveal.min.css")
		link(rel="stylesheet", href="revealjs/css/theme/default.css", id="theme")

		link(rel="stylesheet", href="revealjs/lib/css/zenburn.css")
		link(rel="stylesheet", href="main.css")

		script
			document.write( '<link rel="stylesheet" href="revealjs/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );


		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->


	body

		div.reveal
			div.slides
				section
					h1 NodeJS for the enteprise
					h3 Ready or not?
					p
						small Laurent Zuijdwijk

				section
					h2 What is covered

					ul
						li NodeJS philosophy and internals
						li NPM: Package management & ecosystem
						li Frameworks
							ul
								li Express
								li Mongoose
								li Socket.IO
						li Testing / debugging
						li Performance
						li Deploying
				section
					h2 Heads Up
					p	What is NodeJS?
					p	Javascript on the server powered by
					ul
						li V8. The Javascript engine by Google
						li LibUV. A high performance evented I/O library which offers the same API on Windows and Unix
				
					a(href="http://ssl-static2.strongloop.com/wp-content/uploads/2013/07/SL_Infographic_v2_092013.png", target="_blank") <img src="http://ssl-static2.strongloop.com/wp-content/uploads/2013/07/SL_Infographic_v2_092013.png">

				section
					h2 My experience
					ul
						li Started using NodeJS in 2011 When it was at v0.4
						li Build a fairly big application with Express and MySQL
						li Deployed on Amazon EC2
						li <a href="http://learn.heartworks.me.uk" target="_blank">Heartworks link</a>
						li Used it for buidling quick mocks for an AngularJS application for Audi
						li Built a quick blog for my personal website
						li Using it at the moment as a middleware proxy for TUI

				section
					h2 Who is using it?
					ul
						li Dow Jones
						li Ebay
						li LinkedIn
						li The New York Times
						li Microsoft
						li Pearson
						li Net-a-porter
						li Mozilla
						li Many more...


				section 
					h2 Versioning
					ul
						li Current version v0.10.18
						li Even number are stable releases
						li odd numbers are unstable
						li Last minor version before V1
						li Use a version manager to run your application in the runtime you have tested against
						li 
							i The docs always list the stability of a specific API


				section
					h2 Node works with an event loop
					p IO is asynchronious and won't block (but it can, if you want)
					p Code gets executed when an IO event happens
					ul 
						li Socket data comes in (webserver or Socket.IO etc)
						li Reading a file
					p Not unlike Javascript in the browser

					pre 
						code.javascript
							|fs.readFile('/etc/passwd', function (err, data) {
							|    if (err) throw err;
							|    console.log(data);
							|});

					pre 
						code.javascript
							|var http = require('http');
							|http.createServer(function (req, res) {
							|    res.writeHead(200, {'Content-Type': 'text/plain'});
							|    res.end('Hello World\n');
							|}).listen(1337, '127.0.0.1');
							| 
							|console.log('Server running at http://127.0.0.1:1337/');
				section
					h2 Why is this good?
					ul 
						li Threads are expensive to create 
						li Threads never have to be idle when waiting for IO
						li Multiple requests can be handled in the same thread
				section
					h2 So NodeJS is single threaded then?
					h3 Yes and no...
					ul 
						li The event loop is single threaded
						li LibUV uses multiple threads for IO
						li The cluster module makes parallelization very easy. Multiple processes can automatically share sockets.
						li Forking for occasional heavy computations
						li Developers shouldn't have to deal with concurrency
				section
					h2 But it is Javascript and it is weakly typed

					p Use one of the altJS languages that compile to Javascript
					ul
						li Coffeescript - Write less code, so have less bugs
						li Typescript - static typing
						li Dart
					p Big front-end applications are done in Javascript. <br/>Why not on the server? 
				section
					h2 NPM
					h3 Node package manager
					p Command line tool which also supports common tasks.

					ul
						li Package management <i>'npm install myPackage'</i>
						li Packages are stored locally in the project, unless specified otherwise
						li Publishing and versioning of packages
						li Private repos available
						li Locking down package versions with 'npm shrinkwrap'

				section 
					h2 Frameworks
					ul
						li NodeJS has a HUGE (40.000+ modules) ecosystem based on NPM
						li package quality varies, so be careful

				section
					h2 Express
					h3 Fast web framework based on Sinatra
					ul 
						li Fast developement
						li Advanced routing
						li Easy to work with
						li Supports most templating engines
						li Redis session support
						li elegant architecture

					pre 
						code.javascript
							|app.set('view engine', 'jade');
							|app.use(express.logger('dev'));
							|app.use(express.bodyParser());
							|app.use(myCustomMiddleWare());
							|app.all('/apples', myController.getAllApples)
							|http.createServer(app).listen(app.get('port'), function(){
							|   console.log('Express server listening on port ' + app.get('port'));
							|});
				section
					h2 Mongoose
					h3 MongoDB noSQL ORM
					ul 
						li Schema based
						li No boiler plate code
						li Plays together well with Express
						li Loads of plugins to make life even easier
					pre 
						code.javascript
							|// define a schema
							|var animalSchema = new Schema({ name: String, type: String });
							|  
							|var Animal = mongoose.model('Animal', animalSchema);
							|var dog = new Animal({ type: 'dog' });
							|
							|// Query by type  
							|Animal.findOne({ 'type': 'dog' }, 'name type', function (err, animal) {
							|    if (err) return handleError(err);
							|    console.log('found', animal);
							|})


				section 
					h2 Websockets
					h3 Socket.IO
					ul 
						li Easy to implement socket communications


				section
					h2 Async
					h3 Just one of the tools to solve callback 'hell'
					ul
						li 20 functions to handle multiple async calls
						li series, parallel, whilst, queue, etc..
						li convention over configuration 
						ul 
							li (err, result) method signature

					pre 
						code.javascript
							|async.map(['file1','file2','file3'], fs.stat, function(err, results){
							|   // results is now an array of stats for each file
							|});
							| 
							|async.filter(['file1','file2','file3'], fs.exists, function(results){
							|    // results now equals an array of the existing files
							|});

				section 
					h2 Passport
					p Authentication framework
					ul
						li Works with Express
						li Supports over 120 authentication strategies
						ul
							li Local
							li OpenId
							li Google
							li Facebook
							li Twitter
							li oAuth


				section 
					h2 Does it play well as part of bigger applications?
					ul 
						li Support for most popular message queues
						ul
							li RabbitMQ
							li zeroMQ
							li etc
						li Very good request library for HTTP
						li Easy to execute local applications

				section
					h2 Testing testing testing
					p Multiple good libraries for unit testing
					ul
						li My favorite: Jasmine
						li Jasmine-node: command line tool for NodeJS
						li Easy to run in Jenkins
						li Not so good for async (integration) tests
						li Use some form of dependency injection to ease unit testing
					pre 
						code.javascript
							| var controller = require('controllers/myController')
							| var myDependency = require('myDependency')
							| app.get('some-route', controller(myDependency))
							|
							| // myController
							| module.exports = function(myDependency){
							|    return function(req, res, next){
							|        res.send(myDependency.doSomething());
							|    }
							|}

				section
					h2 debugging

					ul
						li Use node-dev to restart your process when your code changes
						li console.log is often a fast way to inspect objects
						li use node-inspector to debug your application in the Chrome debugger
					pre
						code
							| npm install -g node-inspector
							| node --debug-brk your/node/script.js
							| node-inspector

				section
					h2 Running in production
					p Multiple PaaS providers
					ul 
						li Nodejitsu
						li Heroku
						li Modulus
						li App Fog
						li Azure
						li etc..
					p <a href="http://strongloop.com/strongblog/a-comparison-of-node-js-paas-hosting-providers/" target="_blank">Comparison table</a> 
				
				section
					h2 Performance
					h3 It is fast. Not the fastest, but fast enough

					p JSON serialization
					a(target="_blank", href="http://www.techempower.com/benchmarks/#section=data-r6&hw=ec2&test=json", target="_blank") Benchmarks
						img(src="/benchmark.png")


		script( src="revealjs/lib/js/head.min.js")
		script( src="revealjs/js/reveal.min.js")

		script

			// Full list of configuration options available here:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'revealjs/lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'revealjs/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'revealjs/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'revealjs/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'revealjs/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'revealjs/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});
